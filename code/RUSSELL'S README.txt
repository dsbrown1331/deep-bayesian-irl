- `StrippedNet.py`: Contains the barebones network for reward prediction without auxiliary losses, along with good comments. Can run this file with a model path to test if it is a stripped network (where stripped network means just one of my big nets with all the auxiliary loss layers removed)
- `transfer.py`: Converts a large network with potentially many auxiliary losses into a stripped network with no auxiliary loss layers, as well as gives lots of informative hashes & data that you can use to compare networks to ensure no layers got messed with except the ones you want. If you don't feed it an output file it will only generate hash data and no stripped net.
- `TestStrippedNet.py`: Takes in a stripped network (or non-stripped network, but if so it ignores all auxiliary losses) and asks it to predict returns, then calculates accuracy. No training occurs.
- `CheckLatentSpace.py`: Creates latent_images folder that is helpful to display before/after data from autoencoder, and can be used to explore latent space by taking random samples (which it puts in latent_images/samples) that contain metadata about the vector that generated them as well as letting you see what the outputs are like
- `LearnAtariRewardLinear.py`: Like LearnAtariReward.py, but where the reward is restricted to being a linear combination of input vectors, but it's still just T-REX. So it's just like the MCMC except without the distribution, just finding a single vector w/ Adam.
- `PredictRewardAtopTrainedFeatureEncodingNetwork.py`: Does what it says. Tries to predict binary classification whether or not a given framestack will have a nonzero reward or not. Much more optimized for this specific case and uses my training loop rather than Daniel's. Encodes all of the frames to the latent space up front, sorts them into bins based on whether or not they have zero/pos reward, picks randomly enough to give a 50/50 split, and then trains. To increase amount of training data, increase the number of episodes in generate_novice_demos
- `GenerateImages.py`: Generates image-sequence recordings of novice demos. Used to create training data for my GAN.
- `PredictReturnOfTrajectory.py`: Like PredictRewardAtopTrainedFeatureEncodingNetwork.py, except it works as a regression program to predict reward from a trajectory rather than a classification problem for binary 0/1 from a single framestack